import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar
import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("eclipse")
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.3"
    id("com.matthewprenger.cursegradle") version "1.4.0"
}

version = mod_version
group = "${mod_group}"
ext.version = "${mod_version}"
ext.id = "${mod_id}"
ext.name = "${mod_name}"
ext.author = "${mod_author}"
ext.description = "${mod_description}"
ext.url = "${mod_url}"
ext.loader = "${loader_version.replaceAll("\\..*", "")}"
ext.forge = "${loader_version}"
ext.mc = "${mc_version}"

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mcVersion = "1.12.2"

    injectedTags.put("VERSION", project.version)

    extraRunJvmArguments.addAll("-ea:${project.group}", "-Dmixin.debug.export=true")
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.Tags")
}

repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public" }
    //maven { url "https://maven.mcmoddev.com/" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    ivy {
        url "https://witchery-api.msrandom.net/download/"
        patternLayout {
            artifact "[organisation]/[artifact]-[revision](-[classifier])(.[ext])"
        }
        content {
            includeGroup "WitcheryResurrected0.5.2Hotfix4"
        }
        metadataSources { artifact() }
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven { url = "https://maven.cil.li/" }
    mavenLocal()
}

dependencies {
    //compileOnly rfg.deobf("net.ilexiconn:llibrary-core:1.0.11-1.12.2")
    //compileOnly rfg.deobf("net.ilexiconn:llibrary:1.7.9-1.12.2")
    compileOnly rfg.deobf("appeng:appliedenergistics2:rv6-stable-7")
    compileOnly rfg.deobf("curse.maven:artemislib-313590:2741812:")
    api rfg.deobf("curse.maven:baubles-227083:2518667:")
    compileOnly rfg.deobf("curse.maven:betweenlands-243363:3540287:")
    compileOnly rfg.deobf("curse.maven:chiseledme-250075:3467731")
    compileOnly rfg.deobf("curse.maven:endercore-231868:2972849:")
    compileOnly rfg.deobf("curse.maven:enderio-64578:3328811:")
    compileOnly rfg.deobf("curse.maven:hats-229073:2960397:")
    compileOnly rfg.deobf("curse.maven:ichunutil-229060:2801262:")
    compileOnly rfg.deobf("curse.maven:journeymap-32274:2916002:")
    compileOnly rfg.deobf("curse.maven:mobends-231347:3573346:")
    compileOnly rfg.deobf("curse.maven:morph-229080:2995522:")
    runtimeOnly "curse.maven:naturescompass-252848:2893527:"
    compileOnly rfg.deobf("curse.maven:thaumcraft-223628:2629023")
    compileOnly rfg.deobf("curse.maven:thaumicaugmentation-319441:3536155:")
    compileOnly rfg.deobf("curse.maven:trinketsandbaubles-279900:3604719:")
    compileOnly rfg.deobf("curse.maven:wings-302584:2829351:")
    compileOnly rfg.deobf("curse.maven:xaerosminimap-263420:3630494:")
    api rfg.deobf("curse.maven:mixinbooter-419286:4459218:")
    compileOnly files('deps/GalacticraftCore-1.12.2-4.0.2.280-deobf.jar')
    compileOnly files('deps/MicdoodleCore-1.12.2-4.0.2.280-deobf.jar')
    compileOnly 'WitcheryResurrected0.5.2Hotfix4:WitcheryResurrected:1.12.2-0.5.2.4:forge-all'

    api ("org.spongepowered:mixin:0.8.3") {transitive = false}
    annotationProcessor('org.ow2.asm:asm-debug-all:5.2')
    annotationProcessor('com.google.guava:guava:24.1.1-jre')
    annotationProcessor('com.google.code.gson:gson:2.8.6')
    annotationProcessor ("org.spongepowered:mixin:0.8.3") {transitive = false}
}

def mixinConfigRefMap = 'mixins.' + project.ext.id + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixinConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

tasks.named("reobfJar", ReobfuscatedJar).configure {
    extraSrgFiles.from(mixinSrg)
}

tasks.named("compileJava", JavaCompile).configure {
    doFirst {
        new File(mixinTmpDir).mkdirs()
    }
    options.compilerArgs += [
        "-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}",
        "-AoutSrgFile=${mixinSrg}",
        "-AoutRefMapFile=${refMap}",
    ]
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_id", project.ext.id
    inputs.property "mod_name", project.ext.name
    inputs.property "mod_name2", project.ext.name.replaceAll("\\s", "")
    inputs.property "mod_version", project.ext.version
    inputs.property "mod_group", project.group
    inputs.property "mod_url", project.ext.url
    inputs.property "mod_description", project.ext.description
    inputs.property "mod_author", project.ext.author
    inputs.property "loader_version", project.ext.loader
    inputs.property "forge_version", project.ext.forge
    inputs.property "mc_version", project.ext.mc

    // replace stuff in mods.toml and pack.mcmeta
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'mod_id': project.ext.id,
                'mod_name': project.ext.name,
                'mod_name2': project.ext.name.replaceAll("\\s", ""),
                'mod_version': project.ext.version,
                'mod_group': project.group,
                'mod_url': project.ext.url,
                'mod_description': project.ext.description,
                'mod_author': project.ext.author,
                'loader_version': project.ext.loader,
                'forge_version': project.ext.forge,
                'mc_version': project.ext.mc
        )
    }

    // Embed mixin refmap
    from refMap
    dependsOn("compileJava")
}

jar {
    manifest {
        attributes "FMLCorePlugin": project.group + ".core." + project.ext.name.replaceAll("\\s", "") + "Core"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
    }
}

publishing {

    publications {

        mavenJava (MavenPublication) {

//            artifact sourceJar
//            artifact javadocJar
            from components.java
        }
    }
}

idea {
    module { inheritOutputDirs = true }
    project { settings {
        runConfigurations {
            "1. Run Client"(Gradle) {
                taskNames = ["runClient"]
            }
            "2. Run Server"(Gradle) {
                taskNames = ["runServer"]
            }
            "3. Run Obfuscated Client"(Gradle) {
                taskNames = ["runObfClient"]
            }
            "4. Run Obfuscated Server"(Gradle) {
                taskNames = ["runObfServer"]
            }
        }
        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = "-encoding utf8"
                moduleJavacAdditionalOptions = [
                        (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

curseforge {
    if (!file('CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
    apiKey = project.hasProperty('CURSEFORGE_TOKEN') ? project.findProperty('CURSEFORGE_TOKEN') : (System.getenv("CURSEFORGE_TOKEN") != null ? System.getenv("CURSEFORGE_TOKEN") : '')
    project {
        id = project_curse_id
        changelogType = 'markdown'
        changelog = file('CHANGELOG.md')
        releaseType = project_release_type
        addGameVersion 'Forge'
        // add supported game versions separated by comma
        project_game_versions.split(",").each {
            addGameVersion it.trim()
        }
        mainArtifact(jar) {
            displayName = "[FORGE] [${mc_version}] ${rootProject.name}-v${mod_version}"
            relations {
                requiredDependency 'mixinbootstrap'
                optionalDependency 'mixin-booter'
            }
        }
    }
    options {
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}
