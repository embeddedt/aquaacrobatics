buildscript {

    repositories {

        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = "v${mod_version}-${forge_version.replaceAll("-.*", "")}"
group = "${mod_group}"
ext.version = "${mod_version}"
ext.id = "${mod_id}"
ext.name = "${mod_name}"
ext.author = "${mod_author}"
ext.description = "${mod_description}"
ext.url = "${mod_url}"
ext.loader = "${loader_version.replaceAll("\\..*", "")}"
ext.forge = "${loader_version}"
ext.mc = "${mc_version}"

// need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {

    mappings channel: "${mcp_channel}", version: "${mcp_version}"
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {

            workingDirectory project.file('run')
            jvmArgs.addAll("-ea", "-Dfml.coreMods.load=" + project.group + ".core." + project.ext.name.replaceAll("\\s", "") + "Core")
        }

        server {

            workingDirectory project.file('run')
            jvmArgs.addAll("-ea", "-Dfml.coreMods.load=" + project.group + ".core." + project.ext.name.replaceAll("\\s", "") + "Core")
        }
    }

}

configurations.all {

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->

        if (details.requested.group + ":" + details.requested.name == "org.lwjgl.lwjgl:lwjgl-platform") {

            details.useVersion "2.9.4-nightly-20150209"
        }
    }
}

repositories {

    mavenLocal()
    // unofficial mcp mappings
    maven { url = "http://dogforce-games.com/maven/" }
    // yarn mappings
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://repo.spongepowered.org/maven" }
}

dependencies {

    minecraft "net.minecraftforge:forge:${forge_version}"
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    implementation ("org.spongepowered:mixin:0.8.2") {

        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
}

mixin {

    add sourceSets.main, "mixins.${project.ext.id}.refmap.json"
}

processResources {

    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_id", project.ext.id
    inputs.property "mod_name", project.ext.name
    inputs.property "mod_name2", project.ext.name.replaceAll("\\s", "")
    inputs.property "mod_version", project.ext.version
    inputs.property "mod_group", project.group
    inputs.property "mod_url", project.ext.url
    inputs.property "mod_description", project.ext.description
    inputs.property "mod_author", project.ext.author
    inputs.property "loader_version", project.ext.loader
    inputs.property "forge_version", project.ext.forge
    inputs.property "mc_version", project.ext.mc

    // replace stuff in mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info', 'pack.mcmeta'

        expand (

                'mod_id': project.ext.id,
                'mod_name': project.ext.name,
                'mod_name2': project.ext.name.replaceAll("\\s", ""),
                'mod_version': project.ext.version,
                'mod_group': project.group,
                'mod_url': project.ext.url,
                'mod_description': project.ext.description,
                'mod_author': project.ext.author,
                'loader_version': project.ext.loader,
                'forge_version': project.ext.forge,
                'mc_version': project.ext.mc
        )
    }

    // copy everything else except mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info', 'pack.mcmeta'
    }
}

ext.jarAttributes = [

        "Specification-Title"           : project.id,
        "Specification-Version"         : project.ext.version,
        "Specification-Vendor"          : project.author.toLowerCase(),
        "Implementation-Title"          : project.id,
        "Implementation-Version"        : project.ext.version,
        "Implementation-Vendor"         : project.author.toLowerCase(),
        "Implementation-Vendor-Id"      : project.group,
        "Implementation-URL"            : project.url,
        "Implementation-Timestamp"      : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "FMLCorePlugin"                 : project.group + ".core." + project.ext.name.replaceAll("\\s", "") + "Core",
        "FMLCorePluginContainsFMLMod"   : true
]

def createJarTask(def name, def type, def sources) {

    return tasks.create(name, Jar) {

        from sources
        classifier = type

        manifest { attributes(project.jarAttributes) }
        dependsOn classes
        group 'jar'
    }
}

def createSignJarTask(def name, def jarTask) {

    return tasks.create(name, net.minecraftforge.gradle.common.task.SignJar) {

        onlyIf {

            project.hasProperty('keyStore')
        }

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = jarTask.archivePath
        outputFile = jarTask.archivePath
        dependsOn jarTask
        group 'jar'
    }
}

jar {

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest { attributes(project.jarAttributes) }
    group 'jar'
}

createJarTask("sourceJar", "sources", sourceSets.main.allSource)
createJarTask("javadocJar", "javadoc", javadoc)

createSignJarTask("signJar", jar)
createSignJarTask("signSourceJar", sourceJar)
createSignJarTask("signJavadocJar", javadocJar)

// finalize all jar build tasks with a signing task
def jarTasks = tasks.findAll { task -> !task.name.startsWith('sign') && task.name.toLowerCase().contains("jar")}
jarTasks.each { task -> task.finalizedBy tasks.getByPath("sign" + task.name.substring(0, 1).toUpperCase() + task.name.substring(1))}

artifacts {

//    archives sourceJar
//    archives javadocJar
}

publishing {

    publications {

        mavenJava (MavenPublication) {

//            artifact sourceJar
//            artifact javadocJar
            from components.java
        }
    }
}

signing { sign publishing.publications.mavenJava }

// general signing task runs before sources jar is signed otherwise
signMavenJavaPublication.dependsOn signSourceJar
// jar is otherwise signed before reobfuscating
build.finalizedBy signJar